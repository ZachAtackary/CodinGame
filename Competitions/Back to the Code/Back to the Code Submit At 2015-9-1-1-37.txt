#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <sstream>
#include <list>
#include "stdlib.h"
#include <utility>


using namespace std;

const int RIGHT = 1;
const int LEFT = -1;
const int EMPTY = 1000;


bool firstTime = true;
bool makeSquareInit = true;
bool closestWallDone, closestCornerDone, restWallsDone;
int enemyXVelocity, prevEnemyXVelocity, enemyYVelocity, prevEnemyYVelocity,
  eX, prevEnemyX, eY, prevEnemyY;
int myX, prevMyX, myY, prevMyY, destination[2];
int turn = 101;
int lastTurn = 100;
list <int> destinationsX;
list <int> destinationsY;
int myXVelocity, prevMyXVelocity, myYVelocity, prevMyYVelocity;
int opponentCount; // Opponent count
char map[35][20];

int tempDestX = 1000;
int importantDestinations = 0;

void outputScreen() {
    stringstream s;
    for (int y = 0; y < 20; y++) {
        for (int x = 0; x < 35; x++) {
            s << map[x][y];
        }
        s << endl;
    }
    cerr << s.str();
}

void findVelocity() {
  if (firstTime) {
    prevEnemyXVelocity = 0;
    prevEnemyX =  eX;
    prevEnemyYVelocity = 0;
    prevEnemyY = eY;
    prevMyXVelocity = 0;
    prevMyX = myX;
    prevMyYVelocity = 0;
    prevMyY = myY;
    firstTime = false;
  }
  enemyXVelocity = eX - prevEnemyX;
  enemyYVelocity = eY - prevEnemyY;
  myXVelocity = myX - prevMyX;
  myYVelocity = myY - prevMyY;
}

void storeVals() {
  prevEnemyXVelocity = enemyXVelocity;
  prevEnemyYVelocity = enemyYVelocity;
  prevEnemyX = eX;
  prevEnemyY = eY;
  prevMyXVelocity = myXVelocity;
  prevMyYVelocity = myYVelocity;
  prevMyX = myX;
  prevMyY = myY;
}

void getMap() {
  char c;
  for (int y = 0; y < 20; y++) {
    string line; // One line of the map ('.' = free, '0' = you, otherwise the id of the opponent)
    cin >> line; cin.ignore();
    for (int x = 0; x < line.length(); x++) {
      map[x][y] = line[x];
    }
  }
}

int minMax(int x, int minimum, int maximum) {
  x = min(max(x, minimum), maximum);
  return x;
}

void output(int x, int y) {
  cout << x << "  " << y << endl;
}

void print(list<pair<int,int>> s) {
  list<pair<int,int>>::iterator i;
  for( i = s.begin(); i != s.end(); ++i)
    cerr << i->first << " " << i->second << endl;
  cerr << endl;
}

list<pair<int,int>> getBoarder(int bounds[]) {
  int xInc = 1;
  list<pair<int,int>> boarder;
  for (int y = bounds[1]; y <= bounds[3]; y++) {
    if (y != bounds[1] && y != bounds[3]) xInc = bounds[2]-bounds[0];
    else xInc = 1;
    for (int x = bounds[0]; x <= bounds[2]; x+= xInc) {
      boarder.push_back(make_pair(x,y));
    }
  }
  print(boarder);
  return boarder;
}

void traceSquare(int bounds[]) {
  list<pair<int,int>> boarder = getBoarder(bounds);
  list<pair<int,int>>::iterator i;
  float distToLoc;
  float minDist = 1000;
  pair<int,int> minLoc;
  for( i = boarder.begin(); i != boarder.end(); ++i) {
    if (map[i->first][i->second] == '.') {
      distToLoc = sqrt(pow(myX - i->first, 2) + pow(myY - i->second, 2));
      if( distToLoc < minDist) {
        minDist = distToLoc;
        minLoc = *i;
      }
    }
  }
  cerr << "closest location on square: " << minLoc.first << " " << minLoc.second;
  output(minLoc.first,minLoc.second);
}

int countBlanks(int x1, int y1, int x2, int y2) {
  int count = 0;
  for (int y = y1; y <= y2; y++) {
    for (int x = x1; x <= x2; x++) {
      if (map[x][y] == '.') count++;
    }
  }
  return count;
}

void findSquare() {
  int test = 0;
  int maxX = 34;
  int volume = 0;
  int largestVolume = 0;
  int bounds[4];
  int distanceToCorners[4];
  int cornersX[4];
  int cornersY[4];
  for (int y1 = 0; y1 <= 19; y1++) {
    for (int x1 = 0; x1 <= 34; x1++) {
      for (int y2 = y1; y2 <= 19; y2++) {
        for (int x2 = x1 -1; x2 <= maxX; x2++) {
          if ((map[x2+1][y2] != '.' && map[x2+1][y2] != '0') || x2 == maxX) {
            maxX = x2;
            volume = countBlanks(x1, y1, x2, y2);
            if (volume > largestVolume) {
              largestVolume = volume;
              bounds[0] = x1;
              bounds[1] = y1;
              bounds[2] = x2;
              bounds[3] = y2;
            }
          }
        }
      }
      maxX = 34; //new starting position, new maxX
    }
  }
  cerr << "largest area is at (" << bounds[0] << ", " << bounds[1] << "),(" << bounds[2] << ", " << bounds[3] << ")" << endl;
  traceSquare(bounds);
}

int main()
{
    cin >> opponentCount; cin.ignore();
    srand (time(NULL));
    // game loop
    while (1) {
        int gameRound;
        cin >> gameRound; cin.ignore();
        cerr << "GameRound: " << gameRound << endl;
        int backInTimeLeft; // Remaining back in time
        cin >> myX >> myY >> backInTimeLeft; cin.ignore();
        for (int i = 0; i < opponentCount; i++) {
            int opponentX; // X position of the opponent
            int opponentY; // Y position of the opponent
            int opponentBackInTimeLeft; // Remaining back in time of the opponent
            cin >> opponentX >> opponentY >> opponentBackInTimeLeft; cin.ignore();
            eX = opponentX; eY = opponentY;
        }
        getMap();
        findVelocity();

        findSquare();

        storeVals();
    }
}