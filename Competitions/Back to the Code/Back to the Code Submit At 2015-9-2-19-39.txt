#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <sstream>
#include <list>
#include <array>
#include <tuple>
#include "stdlib.h"
#include <utility>


using namespace std;

const int RIGHT = 1;
const int LEFT = -1;
const int EMPTY = 1000;

bool hasOutputed;
float timeMultiplier;
bool firstTime = true;
bool makeSquareInit = true;
int myX, prevMyX, myY, prevMyY, destination[2];
int turn = 101;
int lastTurn = 100;
list <int> destinationsX;
list <int> destinationsY;
pair<pair<int,int>,pair<int,int>> opponent[3], lastOpponent[3];;
int myXVelocity, prevMyXVelocity, myYVelocity, prevMyYVelocity;
int opponentCount;
char map[35][20];
double valueMap[35][20];

void outputScreen() {
    stringstream s;
    for (int y = 0; y < 20; y++) {
        for (int x = 0; x < 35; x++) {
            s << map[x][y];
        }
        s << endl;
    }
    cerr << s.str();
}

void findVelocity() {
  if (firstTime) {
    for (int i = 0; i < opponentCount; i++) {
      lastOpponent[i].first.first = opponent[i].first.first;
      lastOpponent[i].first.second = opponent[i].first.second;
      lastOpponent[i].second = make_pair(0,0);
    }
    prevMyXVelocity = 0;
    prevMyX = myX;
    prevMyYVelocity = 0;
    prevMyY = myY;
    firstTime = false;
  }
  for (int i = 0; i < opponentCount; i++) {
    opponent[i].second.first = opponent[i].first.first - opponent[i].second.first;
    opponent[i].second.first = opponent[i].first.first - opponent[i].second.first;
  }
  myXVelocity = myX - prevMyX;
  myYVelocity = myY - prevMyY;
}

void storeVals() {
  for (int i = 0; i < opponentCount; i++) {
    lastOpponent[i] = opponent[i];
  }
  prevMyXVelocity = myXVelocity;
  prevMyYVelocity = myYVelocity;
  prevMyX = myX;
  prevMyY = myY;
}

void getMap() {
  char c;
  for (int y = 0; y < 20; y++) {
    string line; // One line of the map ('.' = free, '0' = you, otherwise the id of the opponent)
    cin >> line; cin.ignore();
    for (int x = 0; x < line.length(); x++) {
      map[x][y] = line[x];
    }
  }
}

void output(int x, int y) {
  hasOutputed = true;
  if (myX == prevMyX && myY == prevMyY) cout << rand() % 34 << " " << rand() % 20 << endl;
  else if (x == 1000) cout << rand() % 34 << " " << rand() % 20 << endl;
  else cout << x << "  " << y << endl;
}

void print(list<pair<int,int>> s) {
  list<pair<int,int>>::iterator i;
  for( i = s.begin(); i != s.end(); ++i)
    cerr << i->first << " " << i->second << endl;
  cerr << endl;
}

int distCalc (pair<int,int> a, pair<int,int> b) {
  return abs(b.first - a.first) + abs(b.second - a.second);
}

int timeToCapture(list<pair<int,int>> emptyBoarder, bool out = false) {
  int minDist = 1000;
  int distToLoc;
  list<pair<int,int>>::iterator i;
  list<pair<int,int>>::iterator loc = emptyBoarder.begin();
  for (i = emptyBoarder.begin(); i != emptyBoarder.end(); ++i) {
    distToLoc = abs(myX - i->first) + abs(myY - i->second);
    if( distToLoc < minDist) {
      minDist = distToLoc;
      loc = i;
    }
  }
  int time = minDist;
  //cerr << "min dist to start: " << minDist;
  pair<int,int> prevLoc = *loc;
  pair<int,int> firstMove = make_pair(EMPTY,EMPTY);
  if (out == true) cerr << "first Move: " << firstMove.first << ", " << firstMove.second << endl;
  for (i = loc; i != emptyBoarder.end(); i++) {
    if (firstMove.first == EMPTY) firstMove = *i;
    time += distCalc(*i, prevLoc);
    prevLoc = make_pair(i->first, i->second);
  }
  for (i = emptyBoarder.begin(); i != loc; i++) {
    if (firstMove.first == EMPTY) firstMove = *i;
    time += distCalc(*i, prevLoc);
    prevLoc = make_pair(i->first, i->second);
  }
  int time2 = minDist;
  pair<int,int> firstMove2 = make_pair(EMPTY,EMPTY);;
  prevLoc = *loc;
  i = loc;
  list<pair<int,int>>::iterator end = emptyBoarder.begin();
  end--; //we want to make sure we go to the last one!
  for (i = loc; i != end; i--) {
    if (firstMove2.first == EMPTY) firstMove2 = *i;
    time2 += distCalc(*i, prevLoc);
    //if (out == true)cerr << "time2: " << time2 << endl;
    prevLoc = make_pair(i->first, i->second);
  }
  i = emptyBoarder.end();
  i--;
  for (i; i != loc; i--) {
    if (firstMove2.first == EMPTY) firstMove2 = *i;
    time2 +=  distCalc(*i, prevLoc);
    prevLoc = make_pair(i->first, i->second);
    //if (out == true)cerr << "time2: " << time2 << endl;
  }
  if (out == true) {
    cerr << "time to capture C: " << time << endl;
    cerr << "time to capture CC: " << time2 << endl;
  }
  if (time2 < time) {
    if (out == true) {
      cerr << "next square to go to: " << firstMove2.first << ", " << firstMove2.second << endl;
      output(firstMove2.first, firstMove2.second);
    }
    return time2;
  }
  else if (time <= time2) {
    if (out == true) {
      cerr << "next square to go to: " << firstMove.first << ", " << firstMove.second << endl;
      output(firstMove.first, firstMove.second);
    }
    return time;
  }
}

list<pair<int,int>> getBoarder(pair<int,int> bounds[]) {
  int xInc = 1;
  list<pair<int,int>> top;
  list<pair<int,int>> bottom;
  list<pair<int,int>> left;
  list<pair<int,int>> right;
  list<pair<int,int>> boarder;

  for (int x = bounds[0].first; x <= bounds[1].first-1; x++) {
    if (map[x][bounds[0].second] == '.') top.push_back(make_pair(x,bounds[0].second));
  }
  for (int x = bounds[0].first+1; x <= bounds[1].first; x++) {
    if (map[x][bounds[1].second] == '.') bottom.push_front(make_pair(x,bounds[1].second));
  }
  for (int y = bounds[0].second; y <= bounds[1].second-1; y++) {
    if (map[bounds[1].first][y] == '.') right.push_back(make_pair(bounds[1].first,y));
  }
  for (int y = bounds[0].second+1; y <= bounds[1].second; y++) {
    if (map[bounds[0].first][y] == '.') left.push_front(make_pair(bounds[0].first,y));
  }
  boarder.splice(boarder.end(), top);
  boarder.splice(boarder.end(), right);
  boarder.splice(boarder.end(), bottom);
  boarder.splice(boarder.end(), left);
  return boarder;
}

int countBlanks(int x1, int y1, int x2, int y2) {
  double count = 0;
  for (int y = y1; y <= y2; y++) {
    for (int x = x1; x <= x2; x++) {
      count += valueMap[x][y];
      //if (map[x][y] == '.') count++;
    }
  }
  return count;
}

void findSquare() {
  int test = 0;
  int maxX = 34;
  float volume, time;
  float bestValue = 0;
  float value;
  pair<int,int> bounds[2];
  int distanceToCorners[4];
  int cornersX[4];
  int cornersY[4];
  int count = 0;
  for (int y1 = 0; y1 <= 19; y1++) {
    for (int x1 = 0; x1 <= 34; x1++) {
      for (int y2 = y1; y2 <= 19; y2++) {
        for (int x2 = x1 -1; x2 <= maxX; x2++) {
          count++;
          if ((map[x2+1][y2] != '.' && map[x2+1][y2] != '0') || x2 == maxX) {
            maxX = x2;
            volume = countBlanks(x1, y1, x2, y2);
            pair<int,int> boarder[2] = {make_pair(x1,y1),make_pair(x2,y2)};
            time = timeToCapture(getBoarder(boarder))*timeMultiplier;
            value = volume/time;
            //cerr << "value: " << value << endl;
            if (value > bestValue ){//&& (x2 - x1) < 16 && (y2 - y1) < 16) {
              bestValue = value;
              bounds[0] = make_pair(x1,y1);
              bounds[1] = make_pair(x2,y2);
            }
          }
        }
      }
      maxX = 34; //new starting position, new maxX
    }
  }
  cerr << "number of calulations: " << count << endl;
  cerr << "best value is at (" << bounds[0].first << ", " << bounds[0].second << "),(" << bounds[1].first << ", " << bounds[1].second << ")" << endl;
  timeToCapture(getBoarder(bounds), true);
}

int getDistFromEnemys(int x, int y) {
  int closestDist = 1000;
  int dist;
  for (int i = 0; i < opponentCount; i++){
    dist = distCalc(make_pair(x,y), opponent[i].first);
    if (dist < closestDist) closestDist = dist;
  }
  return closestDist;
}

void createValueMap() {
  for (int y = 0; y <= 19; y++) {
    for (int x = 0; x <= 24; x++) {
      if (map[x][y] == '0' || map[x][y] == '1' || map[x][y] == '2' || map[x][y] == '3') valueMap[x][y] = 0;
      else {
        int dist = (getDistFromEnemys(x, y));
        if (opponentCount == 1) valueMap[x][y] = 55 - dist;
        else valueMap[x][y] = dist;
      }
    }
  }
}

int main()
{
    cin >> opponentCount; cin.ignore();
    if (opponentCount == 1) timeMultiplier = 1;
    else if (opponentCount == 2) timeMultiplier = .9;
    else timeMultiplier = .7;
    srand (time(NULL));
    // game loop
    while (1) {
      hasOutputed = false;
      int gameRound;
      cin >> gameRound; cin.ignore();
      cerr << "GameRound: " << gameRound << endl;
      int backInTimeLeft; // Remaining back in time
      cin >> myX >> myY >> backInTimeLeft; cin.ignore();
      for (int i = 0; i < opponentCount; i++) {
        int opponentX; // X position of the opponent
        int opponentY; // Y position of the opponent
        int opponentBackInTimeLeft; // Remaining back in time of the opponent
        cin >> opponent[i].first.first >> opponent[i].first.second >> opponentBackInTimeLeft; cin.ignore();
      }
      getMap();
      findVelocity();
      createValueMap();
      findSquare();

      storeVals();
      if (hasOutputed == false) output (0,0);
    }
}